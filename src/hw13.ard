\import Data.Bool
\import Data.List
\import Function.Meta
\import Logic
\import Paths.Meta
\import lect12(isInj)
\import lect13

-- 1. Докажите, что add x (add x s) = add x s и add x (add y s) = add y (add x s)

\func add-idemp {S : SetSpec} (x : S.A) (s : S) : add x (add x s) = add x s
  => setExt $ \lam a => (
    \lam el => \case (add-univ el) \with {
      | byLeft p => rewrite p add-head
      | byRight p => p
    },
    \lam el => add-tail el
  )

\func add-swap {S : SetSpec} (x y : S.A) (s : S) : add x (add y s) = add y (add x s)
  => setExt $ \lam a => (add-swap-lemma, add-swap-lemma)
  \where {
    \func add-swap-lemma {S : SetSpec} {a : S.A} {x y : S.A} {s : S.S} : S.isElem a (S.add x (S.add y s)) -> S.isElem a (S.add y (S.add x s)) =>
      \lam el => \case (add-univ el) \with {
        | byLeft p => rewrite p $ add-tail add-head
        | byRight p => \case (add-univ p) \with {
          | byLeft a=y => rewrite a=y add-head
          | byRight a-elem-s => add-tail $ add-tail a-elem-s
        }
      }
  }

-- 2. Докажите, что множество подмножеств является инстансом SetSpec

\func subsets {A : \Set} : SetSpec {A} (A -> \Prop)
  => \new SetSpec {
    | empty => \lam a => Empty
    | add a f => \lam b => (b = a) || f b
    | isElem a f => f a
    | setExt  f => ext (\lam a => \let | (fst, snd) => f a \in propExt fst snd)
    | add-head => byLeft idp
    | add-tail => \lam i => byRight i
    | add-univ => \lam i => i
    | empty-univ => \lam i => i
  }

-- 3. Докажите, что множество подмножеств является наибольшим инстансом, то есть любой другой вкладывается в него.

\func subsets-largest (S : SetSpec) : \Sigma (f : S -> (S.A -> \Prop)) (isInj f)
  => {?}

-- 4. Определите функцию isEmpty для произвольного конечного множества и для ListSet.

\func isEmptySet {S : FinSetSpec} (x : S) : Bool => {?}

\func isEmptyListSet {A : \Set} (x : ListSet A) : Bool => {?}

-- 5. Определите функцию union {A : \Set} : S -> S -> S для произвольного S (удовлетворяющего FinSetSpec) и для ListSet.

-- 6. Определите функцию intersection {A : DecSet} : S -> S -> S для произвольного S (удовлетворяющего FinSetSpec) и для ListSet.

-- 7. Мы не можем определить функция size в общем случае, но мы можем определить предикат S -> Nat -> \Prop, соответствующий \lam xs n => size xs <= n.
--    Задайте этот предикат и докажите, что он эквивалентен обычному определению, если A -- разрешимо и S -- конечно.

-- Optional
-- 8. Определите предикат isFin : \Type -> \Prop так, чтобы множество \Sigma (P : A -> \Prop) (isFin (\Sigma (a : A) (P a))) удовлетворяло FinSetSpec, определите этот инстанс.

-- Optional
-- 9. Определите NubListSet и инстанс FinSetSpec для него.
