\import Algebra.Monoid.GCD
\import Data.Maybe
\import Function.Meta
\import Logic
\import Meta
\import hw01 (gcd)
\import lect07
\open Nat(+)

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.
\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

-- При помощи \new и паттерн матчинга.
\func swap' {A B : \Type} (p : Pair A B) : Pair B A => \case p \with {
  | (a,b) => \new Pair B A {
    | fst_ => b
    | snd_ => a
  }
}

-- При помощи \new и доступа к полям.
\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair B A {
  | fst_ => p.snd_
  | snd_ => p.fst_
}

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => \case p.p \with {}

\func one-isPos : PosNat 1 => \new PosNat {
  | p => ()
}

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record Coprime (n : Nat) (m : Nat) (p : gcd n m = 1)

\func CoPrimeWith60 : \Type => Coprime { | n => 60 }

-- 5. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\class Monad \extends Functor
  | return {A : \Set} : A -> F A
  | \infixl 1 >>= {A B : \Set} : F A -> (A -> F B) -> F B
  | >>=-left-id {A B : \Set} {a : A} {f : A -> F B} : (return a >>= f) = f a
  | >>=-right-id {A B : \Set} {m : F A} : (m >>= return) = m
  | >>=-assoc {A B C : \Set} {m : F A} {f : A -> F B} {g : B -> F C} : (m >>= (\lam x => f x >>= g)) = ((m >>= f) >>= g)

-- 6. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe
  | fmap {A B : \Set} (f : A -> B) (x : Maybe A) : Maybe B \elim x {
    | nothing => nothing
    | just a => just (f a)
  }
  | fmap-id {A : \Set} (x : Maybe A) : fmap (\lam a => a) x = x \elim x {
    | nothing => idp
    | just a => idp
  }
  | fmap-comp {A B C : \Set} (f : A -> B) (g : B -> C) (x : Maybe A) : fmap (\lam a => g (f a)) x = fmap g (fmap f x) \elim x {
    | nothing => idp
    | just a => idp
  }
  | return {A : \Set} (a : A) : Maybe A => just a
  | >>= {A B : \Set} (x : Maybe A) (f : A -> Maybe B) : Maybe B \elim x {
    | nothing => nothing
    | just a => f a
  }
  | >>=-left-id {A B : \Set} {a : A} {f : A -> Maybe B} : (return a >>= f) = f a => idp
  | >>=-right-id {A B : \Set} {m : Maybe A} : (m >>= return) = m \elim m {
    | nothing => idp
    | just a => idp
  }
  | >>=-assoc {A B C : \Set} {m : Maybe A} {f : A -> Maybe B} {g : B -> Maybe C} : (m >>= (\lam x => f x >>= g)) = ((m >>= f) >>= g) \elim m {
    | nothing => idp
    | just a => idp
  }

-- 7. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\instance StateMonad {S : \Set} : Monad (State S)
  | fmap {A B : \Set} (f : A -> B) (s : State S A) : State S B => \new State {
    | state => \lam s1 => \let (s1', a) => s.state s1 \in (s1', f a)
  }
  | fmap-id {A : \Set} (s : State S A) : fmap (\lam a => a) s = s => idp
  | fmap-comp {A B C : \Set} (f : A -> B) (g : B -> C) (s : State S A) : fmap (\lam a => g (f a)) s = fmap g (fmap f s) => idp
  | return {A : \Set} (a : A) : State S A => \new State {
    | state => \lam s => (s, a)
  }
  | >>= {A B : \Set} (m : State S A) (f : A -> State S B) : State S B => \new State {
    | state => \lam s => \let
      | (s', a) => m.state s
      | m' : State S B => f a
      \in m'.state s'
  }
  | >>=-left-id {A B : \Set} {a : A} {f : A -> State S B} : (return a >>= f) = f a => idp
  | >>=-right-id {A B : \Set} {m : State S A} : (m >>= return) = m => idp
  | >>=-assoc {A B C : \Set} {m : State S A} {f : A -> State S B} {g : B -> State S C} : (m >>= (\lam x => f x >>= g)) = ((m >>= f) >>= g) => idp

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)
