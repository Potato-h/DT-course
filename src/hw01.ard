-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ y _ : Nat) : Nat => y

\func apply (f : Nat -> Nat) (x : Nat) : Nat => f x

\func compose (f : Nat -> Nat) (g : Nat -> Nat) (x : Nat) : Nat => f (g x)

\func flip (f : Nat -> Nat -> Nat) (x y : Nat) : Nat => f y x

\func second' : Nat -> Nat -> Nat => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 3 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 5 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (x y z : Bool) : Bool \elim x
  | false => z
  | true => y

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x x y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y => x * (x ^ y)

\func fac (x : Nat) : Nat
  | 0 => 1
  | suc x => suc x * fac x

-- 7. Определите mod и gcd.

\func mod (x y : Nat) => x - y * (x `div` y)

\func modTest1 : mod 101 20 = 1 => idp
\func modTest2 : mod (101 * 13 + 2) 13 = 2 => idp

\func gcd (x y : Nat) => aux x y (x + y)
  \where {
    \func aux (x y fuel : Nat) : Nat \elim fuel
      | 0 => 0
      | suc fuel => \case x \with {
        | 0 => y
        | suc _ => aux y (x `mod` y) fuel
      }
  }

\func gcdTest1 : gcd 40 100 = 20 => idp
\func gcdTest2 : gcd (21 * 5) (21 * 2) = 21 => idp
